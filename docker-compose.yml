# -------------------- Networks & Volumes --------------------
networks:
  mspr:
    external: true
    name: ${DOCKER_NETWORK_NAME}

  product_net:
    internal: true
  order_net:
    internal: true
  customer_net:
    internal: true

volumes:
  product_postgres_data:
  order_postgres_data:
  customer_postgres_data:

# -------------------- Services --------------------
services:
  # -------- Reverse proxy (Traefik) --------
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      - --providers.docker.network=${DOCKER_NETWORK_NAME}
      - --entrypoints.web.address=:${TRAEFIK_HTTP_PORT:-80}
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addRoutersLabels=true
      - --accesslog=true
      - --log.level=INFO
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "8083:8080"
    networks: [mspr]
    restart: unless-stopped
    depends_on:
      - docker-socket-proxy

  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-socket-proxy
    environment:
      CONTAINERS: 1
      EVENTS: 1
      INFO: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: [mspr]
    restart: unless-stopped

  # -------- Auth Jwt --------
  jwt-auth:
    image: ghcr.io/llnabsll/jwt-auth:1.0
    container_name: jwt-auth
    environment:
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER_URL}
      KEYCLOAK_JWKS_URL: ${KEYCLOAK_JWKS_URL}
    networks: [mspr]
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=${DOCKER_NETWORK_NAME}
      - traefik.http.services.jwt-auth.loadbalancer.server.port=8001
      - traefik.http.middlewares.fa.forwardauth.address=http://jwt-auth:8001/auth
      - traefik.http.middlewares.fa.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.fa.forwardauth.authRequestHeaders=Authorization
      - traefik.http.middlewares.fa.forwardauth.authResponseHeaders=X-Authenticated-User,X-Authenticated-Email

  # -------- Keycloak --------
  keycloak:
    image: ghcr.io/llnabsll/keycloak:1.0
    container_name: keycloak
    ports:
      - "8081:8080"
    networks: [mspr]
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=${DOCKER_NETWORK_NAME}
      - traefik.http.routers.keycloak.rule=PathPrefix(`/auth`)
      - traefik.http.routers.keycloak.entrypoints=web
      - traefik.http.services.keycloak.loadbalancer.server.port=8080

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    command: >
      bash -lc "rabbitmq-plugins enable --offline rabbitmq_prometheus &&
                rabbitmq-server"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-app}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-app}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    networks: [mspr]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks: [mspr]
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped

  # -------- Databases --------
  product-db:
    image: postgres:17
    container_name: product-db
    environment:
      POSTGRES_USER: ${PRODUCT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCT_POSTGRES_DB}
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
    networks: [product_net]
    restart: unless-stopped

  order-db:
    image: postgres:17
    container_name: order-db
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDER_POSTGRES_DB}
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
    networks: [order_net]
    restart: unless-stopped

  customer-db:
    image: postgres:17
    container_name: customer-db
    environment:
      POSTGRES_USER: ${CUSTOMER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CUSTOMER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${CUSTOMER_POSTGRES_DB}
    volumes:
      - customer_postgres_data:/var/lib/postgresql/data
    networks: [customer_net]
    restart: unless-stopped

  # -------- APIs --------
  product-api:
    image: ghcr.io/llnabsll/product-api:1.0
    container_name: product-api
    environment:
      DATABASE_URL: postgresql+psycopg2://${PRODUCT_POSTGRES_USER}:${PRODUCT_POSTGRES_PASSWORD}@product-db:5432/${PRODUCT_POSTGRES_DB}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER_URL}
      KEYCLOAK_JWKS_URL: ${KEYCLOAK_JWKS_URL}
      ROLE_READ: ${PRODUCT_ROLE_READ}
      ROLE_WRITE: ${PRODUCT_ROLE_WRITE}
      ROOT_PATH: /api/product
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://app:app@rabbitmq:5672/%2F}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-events}
      RABBITMQ_EXCHANGE_TYPE: ${RABBITMQ_EXCHANGE_TYPE:-topic}
    networks: [mspr, product_net]
    restart: unless-stopped
    depends_on:
      - product-db
      - rabbitmq

  order-api:
    image: ghcr.io/llnabsll/order-api:1.0
    container_name: order-api
    environment:
      DATABASE_URL: postgresql+psycopg2://${ORDER_POSTGRES_USER}:${ORDER_POSTGRES_PASSWORD}@order-db:5432/${ORDER_POSTGRES_DB}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER_URL}
      KEYCLOAK_JWKS_URL: ${KEYCLOAK_JWKS_URL}
      ROLE_READ: ${ORDER_ROLE_READ}
      ROLE_WRITE: ${ORDER_ROLE_WRITE}
      ROOT_PATH: /api/order
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://app:app@rabbitmq:5672/%2F}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-events}
      RABBITMQ_EXCHANGE_TYPE: ${RABBITMQ_EXCHANGE_TYPE:-topic}
    networks: [mspr, order_net]
    restart: unless-stopped
    depends_on:
      - order-db
      - rabbitmq

  customer-api:
    image: ghcr.io/llnabsll/customer-api:1.0
    container_name: customer-api
    environment:
      DATABASE_URL: postgresql+psycopg2://${CUSTOMER_POSTGRES_USER}:${CUSTOMER_POSTGRES_PASSWORD}@customer-db:5432/${CUSTOMER_POSTGRES_DB}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER_URL}
      KEYCLOAK_JWKS_URL: ${KEYCLOAK_JWKS_URL}
      ROLE_READ: ${CUSTOMER_ROLE_READ}
      ROLE_WRITE: ${CUSTOMER_ROLE_WRITE}
      ROOT_PATH: /api/customer
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://app:app@rabbitmq:5672/%2F}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-events}
      RABBITMQ_EXCHANGE_TYPE: ${RABBITMQ_EXCHANGE_TYPE:-topic}
    networks: [mspr, customer_net]
    restart: unless-stopped
    depends_on:
      - customer-db
      - rabbitmq
